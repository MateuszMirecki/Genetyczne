Generation: 1, Best fitness: -1000, Program: if ( B1 ) { while ( False ) { } } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } B1 = False || False && True , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 2, Best fitness: -1000, Program: if ( B1 ) { while ( False ) { } } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } B1 = False || False && True , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 3, Best fitness: -1000, Program: if ( ( ! True ) ) { while ( True ) { } } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } B3 = ( True && False ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 4, Best fitness: -1000, Program: if ( False ) { while ( False ) { } } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { if ( True ) { } X3 = 402 B2 = False B1 = False || False && True while ( True ) { read ( X4 ) } while ( True ) { } } while ( True ) { } } B2 = False , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 5, Best fitness: -1000, Program: B2 = False while ( True ) { if ( B1 ) { while ( False ) { } } X3 = ( 821 ) B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } B2 = False , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 6, Best fitness: -1000, Program: X5 = X5 + X1 while ( True ) { if ( B1 ) { write ( False ) } X3 = 402 B2 = False B2 = False || False && True while ( True ) { read ( X4 ) } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False read ( X1 ) while ( True ) { } } } B1 = - X4 + X1 != 402 && True , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 7, Best fitness: -1000, Program: while ( ! False && ! False ) { X3 = 962 read ( X3 ) if ( True ) { } while ( True ) { } read ( X2 ) } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } while ( B1 ) { while ( True ) { } read ( X5 ) B3 = True write ( True ) read ( X4 ) read ( X4 ) } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 8, Best fitness: -1000, Program: X3 = 402 while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } B1 = X2 + X5 >= - 944 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 9, Best fitness: -1000, Program: if ( B1 ) { while ( True ) { read ( X4 ) } } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { if ( True ) { } X3 = 402 B2 = False B1 = False || False && True while ( True ) { read ( X4 ) } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } } X4 = 539 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 10, Best fitness: -1000, Program: read ( X5 ) while ( True ) { read ( X4 ) } B2 = False , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 11, Best fitness: -1000, Program: read ( X5 ) while ( True ) { read ( X4 ) } X4 = 539 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 12, Best fitness: -1000, Program: read ( X1 ) while ( True ) { read ( X4 ) } B1 = B1 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 13, Best fitness: -1000, Program: if ( B1 ) { while ( False ) { } } while ( True ) { read ( X4 ) X3 = 402 } B1 = True , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 14, Best fitness: -1000, Program: B3 = True while ( True ) { if ( True ) { } B2 = False B2 = False B2 = False while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { if ( True ) { } X3 = 402 B2 = False B1 = False || False && True while ( True ) { read ( X4 ) } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } } while ( True ) { if ( True ) { } X3 = 402 B2 = False B2 = False while ( True ) { read ( X4 ) } while ( True ) { } } } while ( True ) { read ( X4 ) X3 = 402 } } X4 = 539 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 15, Best fitness: -1000, Program: if ( B1 ) { while ( False ) { } } while ( True ) { read ( X1 ) X3 = 402 } B1 = B1 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 16, Best fitness: -1000, Program: if ( B1 ) { while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X5 ) } } while ( True ) { if ( B1 ) { while ( False ) { } } X4 = X1 + X3 B2 = False X3 = 402 while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } read ( X3 ) } B1 = True , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 17, Best fitness: -1000, Program: if ( B1 ) { while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X5 ) } } while ( True ) { if ( B1 ) { while ( False ) { } } X4 = X1 + X3 B2 = False X3 = 402 while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } read ( X1 ) } read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 18, Best fitness: -1000, Program: if ( B1 ) { while ( True ) { if ( B1 ) { while ( False ) { } } X4 = X1 + X3 B2 = False X3 = 402 while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } read ( X3 ) } } while ( True ) { if ( B1 ) { while ( False ) { } } X4 = X1 + X3 B2 = False X3 = 402 while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } read ( X3 ) } read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 19, Best fitness: -1000, Program: read ( X5 ) while ( True ) { read ( X1 ) X3 = 402 } X1 = 785 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 20, Best fitness: -1000, Program: if ( B1 ) { while ( True ) { read ( X1 ) X3 = 402 } } while ( False ) { B1 = False X4 = X1 + X3 B2 = False X3 = 402 while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } read ( X3 ) } read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 21, Best fitness: -1000, Program: if ( B1 ) { while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } } while ( True ) { B1 = False X4 = X1 + X3 B2 = False X3 = 402 while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } read ( X3 ) } read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 22, Best fitness: -1000, Program: if ( True ) { while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } } while ( True ) { if ( B1 ) { while ( False ) { } } X4 = X1 + X3 B2 = False X3 = 402 while ( True ) { if ( True ) { } X3 = 402 B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } read ( X5 ) } B2 = True , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 23, Best fitness: -1000, Program: while ( B1 ) { write ( 766 ) X2 = 386 } while ( True ) { if ( B1 ) { while ( False ) { } } X4 = X1 + X3 B2 = False X3 = 402 while ( True ) { if ( True ) { } B2 = False B2 = False X3 = 402 while ( True ) { read ( X4 ) } read ( X3 ) } read ( X5 ) } read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 24, Best fitness: -1000, Program: while ( B1 ) { write ( 766 ) X2 = 386 } read ( X1 ) read ( X2 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 25, Best fitness: -1000, Program: if ( B1 ) { while ( True ) { read ( X1 ) X3 = 402 } } while ( True ) { if ( True ) { } X3 = 402 B2 = False X3 = 402 while ( B1 ) { write ( 766 ) X2 = 386 } read ( X3 ) } read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 26, Best fitness: -1000, Program: if ( ( True ) ) { while ( False ) { } } while ( True ) { read ( X1 ) X3 = 402 } B2 = False , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 27, Best fitness: -1000, Program: if ( ( True ) ) { while ( False ) { } } while ( True ) { read ( X1 ) X3 = 402 } B2 = False , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 28, Best fitness: -1000, Program: while ( True ) { read ( X1 ) X3 = 402 } while ( True ) { read ( X1 ) X3 = 402 } read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 29, Best fitness: -1000, Program: while ( True ) { read ( X3 ) X3 = 402 } while ( True ) { if ( True ) { } X3 = 402 B2 = False X3 = 402 while ( B1 ) { write ( 766 ) X2 = 386 } read ( X3 ) } if ( X5 + X1 < X5 + X2 ) { X5 = 54 } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 30, Best fitness: -1000, Program: while ( True ) { read ( X1 ) X3 = 402 } while ( True ) { if ( True ) { } X3 = 402 B2 = False X3 = 402 while ( B1 ) { write ( 766 ) X2 = 386 } read ( X3 ) } read ( X4 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 31, Best fitness: -1000, Program: while ( True ) { read ( X1 ) X3 = 402 } while ( True ) { read ( X3 ) X3 = X5 + X4 } if ( True ) { } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 32, Best fitness: -1000, Program: while ( True ) { read ( X1 ) X3 = 402 } if ( True ) { } if ( False ) { while ( True ) { read ( X3 ) X3 = 402 } } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 33, Best fitness: -1000, Program: while ( True ) { if ( True ) { } X3 = 402 B2 = False X3 = 402 while ( B1 ) { write ( 766 ) X2 = 386 } read ( X3 ) } while ( True ) { read ( X1 ) X3 = 402 } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 34, Best fitness: -1000, Program: while ( B2 ) { read ( X3 ) X3 = 402 } while ( True ) { read ( X1 ) X3 = 653 } read ( X1 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 35, Best fitness: -1000, Program: X2 = 328 while ( True ) { read ( X1 ) X3 = 402 } read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 36, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X1 ) X3 = 653 } read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 37, Best fitness: -1000, Program: while ( True ) { read ( X1 ) X3 = 402 } while ( True ) { read ( X1 ) X3 = 653 } read ( X4 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 38, Best fitness: -1000, Program: read ( X3 ) read ( X3 ) while ( True ) { read ( X1 ) X3 = 402 } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 39, Best fitness: -1000, Program: while ( True ) { read ( X3 ) X3 = 402 } while ( True ) { read ( X1 ) B1 = ( B3 ) } read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 40, Best fitness: -1000, Program: while ( True ) { read ( X1 ) X3 = 402 } read ( X1 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 41, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X3 ) X3 = 402 } read ( X1 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 42, Best fitness: -1000, Program: read ( X1 ) while ( True ) { read ( X2 ) } X3 = 402 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 43, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X2 ) } X3 = 402 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 44, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X1 ) } X3 = 402 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 45, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X1 ) } X3 = 402 , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 46, Best fitness: -1000, Program: read ( B1 ) while ( True ) { read ( X2 ) } while ( True ) { read ( X1 ) } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 47, Best fitness: -1000, Program: read ( B1 ) while ( True ) { read ( X1 ) } if ( True ) { } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 48, Best fitness: -1000, Program: read ( B1 ) while ( True ) { read ( X1 ) } while ( True ) { read ( X1 ) if ( True ) { } } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 49, Best fitness: -1000, Program: while ( True ) { read ( X1 ) } B2 = False , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 50, Best fitness: -1000, Program: read ( X1 ) write ( 618 ) if ( True ) { } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 51, Best fitness: -1000, Program: read ( B1 ) while ( True ) { read ( X1 ) } while ( True ) { read ( X1 ) } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 52, Best fitness: -1000, Program: read ( B2 ) while ( True ) { read ( X1 ) if ( True ) { } } if ( True ) { read ( X4 ) } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 53, Best fitness: -1000, Program: read ( B2 ) while ( True ) { read ( X1 ) } if ( True ) { read ( X4 ) } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 54, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X1 ) read ( B2 ) } if ( True ) { read ( X4 ) } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 55, Best fitness: -1000, Program: read ( X1 ) while ( True ) { read ( X1 ) read ( B2 ) } if ( True ) { read ( X4 ) } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 56, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X1 ) if ( True ) { read ( B2 ) } } B3 = True , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 57, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X1 ) read ( B2 ) } if ( False ) { read ( X4 ) } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 58, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X1 ) if ( True ) { read ( B2 ) } } if ( False ) { read ( X4 ) } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 59, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X1 ) if ( True ) { read ( B2 ) } } , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 60, Best fitness: -1000, Program: read ( X4 ) while ( True ) { read ( X1 ) if ( True ) { read ( B2 ) } } B3 = True , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
