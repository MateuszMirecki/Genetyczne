Generation: 1, Best fitness: -50, Program: if ( 233 != 682 || ( True ) ) { while ( True ) { read ( X2 ) } } write ( X5 + X2 ) read ( X5 ) read ( X4 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 2, Best fitness: -50, Program: if ( 233 != 682 || ( True ) ) { while ( True ) { read ( X2 ) } } write ( X5 + X2 ) read ( X4 ) read ( X1 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 3, Best fitness: -50, Program: if ( 233 != 682 || ( True ) ) { while ( True ) { read ( X2 ) } } write ( X5 + X2 ) read ( X4 ) read ( X1 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 4, Best fitness: -50, Program: if ( 148 <= 391 || ( True ) ) { while ( True ) { read ( X2 ) } } write ( X5 + X2 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 5, Best fitness: -50, Program: if ( ( False ) ) { while ( True ) { read ( X2 ) } } write ( X5 + X2 ) read ( X4 ) read ( X4 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 6, Best fitness: -50, Program: if ( B3 ) { X3 = 618 } write ( X5 + X2 ) read ( X5 ) read ( X4 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 7, Best fitness: -50, Program: if ( B3 ) { X3 = 618 } write ( X5 + X2 ) read ( X5 ) read ( X4 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 8, Best fitness: -50, Program: if ( B3 ) { X3 = 618 } write ( X5 + X2 ) read ( X4 ) read ( X4 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 9, Best fitness: -50, Program: if ( B3 ) { X3 = 618 } write ( X5 + X2 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 10, Best fitness: -50, Program: if ( B3 ) { read ( B2 ) } write ( X5 + X2 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 11, Best fitness: -50, Program: if ( B3 ) { X3 = 618 } write ( X5 + X2 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 12, Best fitness: -50, Program: if ( B3 ) { X3 = 618 } write ( X5 + X2 ) read ( X2 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 13, Best fitness: -50, Program: if ( B3 ) { read ( B2 ) } write ( X5 + X2 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 14, Best fitness: -50, Program: if ( B3 ) { read ( B2 ) } write ( X5 + X2 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 15, Best fitness: -50, Program: if ( B3 ) { X3 = X5 + X2 } write ( X1 ) read ( X5 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 16, Best fitness: -50, Program: if ( B3 ) { read ( B2 ) } write ( X1 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 17, Best fitness: -50, Program: if ( 916 < 862 || B3 ) { read ( B3 ) } write ( X1 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 18, Best fitness: -50, Program: if ( 916 < 862 || B3 ) { read ( B3 ) } write ( X1 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 19, Best fitness: -50, Program: if ( B3 ) { X3 = X5 + X2 } write ( X1 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 20, Best fitness: -50, Program: if ( 916 < 862 || B3 ) { read ( B3 ) } write ( X1 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 21, Best fitness: -50, Program: if ( 916 < 862 || B3 ) { read ( B3 ) } write ( X1 ) read ( X5 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 22, Best fitness: -50, Program: if ( True ) { if ( True ) { } } write ( X1 ) read ( X5 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 23, Best fitness: -50, Program: if ( True ) { if ( True ) { } } write ( X1 + X3 ) read ( X2 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 24, Best fitness: -50, Program: if ( B3 ) { X3 = X5 + X2 } write ( ( X3 ) ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 25, Best fitness: -50, Program: if ( 916 < 862 || B3 ) { read ( B3 ) } write ( X4 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 26, Best fitness: -50, Program: while ( - 875 >= X5 ) { while ( True ) { read ( X4 ) read ( X5 ) read ( X1 ) } while ( False ) { read ( X3 ) } while ( True ) { } } write ( X4 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 27, Best fitness: -50, Program: if ( 916 < 862 || B3 ) { read ( B3 ) } write ( X4 ) read ( X5 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 28, Best fitness: -50, Program: if ( 916 < 862 || B3 ) { read ( B3 ) } write ( X4 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 29, Best fitness: -50, Program: X1 = X5 - X3 write ( 23 ) read ( X1 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 30, Best fitness: -50, Program: B1 = False write ( 23 ) read ( X5 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 31, Best fitness: -50, Program: B1 = 916 < X4 write ( X5 - X3 ) read ( X1 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 32, Best fitness: -50, Program: B1 = False write ( 23 ) read ( X5 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 33, Best fitness: -50, Program: B1 = False write ( 23 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 34, Best fitness: -50, Program: B1 = False write ( 23 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 35, Best fitness: -50, Program: while ( ( True ) && ! True ) { write ( 488 ) } write ( 23 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 36, Best fitness: -50, Program: B1 = False write ( 23 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 37, Best fitness: -50, Program: B1 = False write ( 23 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 38, Best fitness: -50, Program: B1 = False write ( 23 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 39, Best fitness: -50, Program: X5 = X1 + X5 write ( 23 ) read ( X5 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 40, Best fitness: -50, Program: B1 = False write ( X1 + X4 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 41, Best fitness: -50, Program: B3 = ! B1 write ( 23 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 42, Best fitness: -50, Program: B3 = ! B1 write ( 23 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 43, Best fitness: -50, Program: B3 = B1 write ( 23 ) read ( X3 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 44, Best fitness: -50, Program: B3 = True write ( 23 ) read ( X3 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 45, Best fitness: -50, Program: B3 = True write ( 23 ) read ( X3 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 46, Best fitness: -50, Program: B3 = True write ( 23 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 47, Best fitness: -50, Program: B3 = True write ( 23 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 48, Best fitness: -50, Program: while ( True && False ) { write ( 938 ) while ( True ) { } B3 = True write ( 870 ) if ( True ) { } while ( True ) { } } write ( 23 ) read ( X3 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 49, Best fitness: -50, Program: B3 = True write ( X2 + X2 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 50, Best fitness: -50, Program: B3 = True write ( X2 + X2 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 51, Best fitness: -50, Program: B3 = True write ( 23 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 52, Best fitness: -50, Program: B3 = True write ( 23 ) read ( X3 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 53, Best fitness: -50, Program: B3 = True write ( 23 ) read ( X3 ) read ( X5 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 54, Best fitness: -50, Program: B3 = ( True ) && B1 write ( X2 * X5 ) read ( X3 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 55, Best fitness: -50, Program: B3 = True write ( X2 * X5 ) read ( X5 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 56, Best fitness: -50, Program: B3 = True write ( X2 * X5 ) read ( X5 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 57, Best fitness: -50, Program: B3 = True write ( X2 * X5 ) read ( X3 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 58, Best fitness: -50, Program: B3 = True write ( X2 * X5 ) read ( X5 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 59, Best fitness: -50, Program: B3 = True write ( X2 * X5 ) read ( X3 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
Generation: 60, Best fitness: -50, Program: B3 = True write ( X2 * X5 ) read ( X3 ) read ( X3 ) , Population size: 30, Crossover probability: 0.7, Mutation probability: 0.3, Rounds per generation: 50, Tournament size: 3, Depth: 6, Max width: 6, Min numeric value: 0, Max numeric value: 1000
